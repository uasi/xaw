# Perl 5 configuration bits.
P5_ARCHLIB = /Users/uasi/perl5/perlbrew/perls/perl-5.14.0/lib/5.14.0/darwin-2level
P5_LIBPERL = libperl.a

# ex: set ro:
# DO NOT EDIT THIS FILE
# Generated by Parrot::Configure::Compiler from build/src/pmc/Makefile.in

## $Id$

PRODUCT_NAME  = libxml

# values from parrot_config
VERSION_DIR   = /3.3.0-devel
INCLUDE_DIR   = /Users/uasi/Dev/Projects/rakudo/parrot_install/include$(VERSION_DIR)
LIB_DIR       = /Users/uasi/Dev/Projects/rakudo/parrot_install/lib$(VERSION_DIR)
SRC_DIR       = /Users/uasi/Dev/Projects/rakudo/parrot_install/src$(VERSION_DIR)
TOOLS_DIR     = /Users/uasi/Dev/Projects/rakudo/parrot_install/lib$(VERSION_DIR)/tools/lib
STAGING_DIR   = ../../dynext
INSTALL_DIR   = $(LIB_DIR)/dynext

# Set up extensions
LOAD_EXT      = .bundle
O             = .o

# Setup some commands
PERL          = perl
RM_F          = $(PERL) -MExtUtils::Command -e rm_f
MKPATH        = $(PERL) -MExtUtils::Command -e mkpath
CHMOD         = $(PERL) -MExtUtils::Command -e chmod
CP            = $(PERL) -MExtUtils::Command -e cp
CC            = gcc-4.2 -c
LD            = c++
LDFLAGS       = -L/usr/local/lib -L"/Users/uasi/Dev/Projects/rakudo/parrot/blib/lib"  -lm -lutil -lgmp -lreadline -lffi  
LD_LOAD_FLAGS = -undefined dynamic_lookup -bundle
CFLAGS        = -g -pipe -fno-common  -I/usr/local/include -pipe -fno-common  -DHASATTRIBUTE_CONST  -DHASATTRIBUTE_DEPRECATED  -DHASATTRIBUTE_MALLOC  -DHASATTRIBUTE_NONNULL  -DHASATTRIBUTE_NORETURN  -DHASATTRIBUTE_PURE  -DHASATTRIBUTE_UNUSED  -DHASATTRIBUTE_WARN_UNUSED_RESULT  -DDISABLE_GC_DEBUG=1 -DNDEBUG -I/usr/local/Cellar/libffi/3.0.9/lib/libffi-3.0.9/include      -falign-functions=16 -funit-at-a-time -maccumulate-outgoing-args -W -Wall -Waggregate-return -Wcast-align -Wcast-qual -Wchar-subscripts -Wcomment -Wdisabled-optimization -Wdiv-by-zero -Wendif-labels -Wextra -Wformat -Wformat-extra-args -Wformat-nonliteral -Wformat-security -Wformat-y2k -Wimplicit -Wimport -Winit-self -Winline -Winvalid-pch -Wmissing-braces -Wmissing-field-initializers -Wno-missing-format-attribute -Wmissing-include-dirs -Wmultichar -Wpacked -Wparentheses -Wpointer-arith -Wpointer-sign -Wreturn-type -Wsequence-point -Wsign-compare -Wstrict-aliasing -Wstrict-aliasing=2 -Wswitch -Wswitch-default -Wtrigraphs -Wundef -Wno-unused -Wunknown-pragmas -Wvariadic-macros -Wwrite-strings -Wc++-compat -Wdeclaration-after-statement -Werror=declaration-after-statement -Wimplicit-function-declaration -Wimplicit-int -Wmain -Wmissing-declarations -Wmissing-prototypes -Wnested-externs -Wnonnull -Wold-style-definition -Wstrict-prototypes -fvisibility=hidden 
CC_OUT        = -o 
LD_OUT        = -o 
LIBPARROT     = 

PMC2C_INCLUDES  = --include $(SRC_DIR) --include $(SRC_DIR)/pmc
PMC2C           = $(PERL) $(LIB_DIR)/tools/build/pmc2c.pl
PMC2CD          = $(PMC2C) --dump $(PMC2C_INCLUDES)
PMC2CC          = $(PMC2C) -c $(PMC2C_INCLUDES)

INCLUDES        = -I/usr/include/libxml2 -I$(INCLUDE_DIR) -I$(INCLUDE_DIR)/pmc
LINKARGS        = -lxml2 $(LDFLAGS) $(LD_LOAD_FLAGS) $(LIBPARROT)

DYNPMC_GROUP = $(PRODUCT_NAME)_group

PMC_SOURCES = \
	      xmlnode.pmc \
	      xmldoc.pmc \
	      htmldoc.pmc \
	      htmlparsercontext.pmc \
	      htmlparser.pmc

PMC_C = $(PMC_SOURCES:.pmc=.c)
PMC_DUMP = $(PMC_SOURCES:.pmc=.dump)

OBJS = \
	lib-$(DYNPMC_GROUP)$(O) \
	$(PMC_SOURCES:.pmc=$(O)) \
	common.o

CLEANUPS = \
	"*$(LOAD_EXT)" \
	"*$(O)" \
	"pmc*.h" \
	"*.dump" \
	$(PMC_C) \
	"*_group.*" \
	$(STAGING_DIR)/$(DYNPMC_GROUP)$(LOAD_EXT)


all: staging

.SUFFIXES : .pmc .dump

.pmc.dump:
	$(PMC2C) --no-lines --dump $(PMC2C_INCLUDES) $<
.pmc.c:
	$(PMC2C) --no-lines -c $(PMC2C_INCLUDES) $<

generate: $(PMC_SOURCES) $(PMC_DUMP) $(PMC_C)
	$(PMC2C) --no-lines --library $(DYNPMC_GROUP) -c $(PMC_SOURCES)

compile: generate
	$(CC) $(CC_OUT)common$(O) $(INCLUDES) $(CFLAGS) common.c
	$(CC) $(CC_OUT)htmldoc$(O) $(INCLUDES) $(CFLAGS) htmldoc.c
	$(CC) $(CC_OUT)htmlparsercontext$(O) $(INCLUDES) $(CFLAGS) htmlparsercontext.c
	$(CC) $(CC_OUT)htmlparser$(O) $(INCLUDES) $(CFLAGS) htmlparser.c
	$(CC) $(CC_OUT)xmldoc$(O) $(INCLUDES) $(CFLAGS) xmldoc.c
	$(CC) $(CC_OUT)xmlnode$(O) $(INCLUDES) $(CFLAGS) xmlnode.c
	$(CC) $(CC_OUT)lib-$(DYNPMC_GROUP)$(O) $(INCLUDES) $(CFLAGS) $(DYNPMC_GROUP).c

linklibs: compile
	$(LD) $(LD_OUT)$(DYNPMC_GROUP)$(LOAD_EXT) $(OBJS) $(LINKARGS)

staging: linklibs
	$(MKPATH) $(STAGING_DIR)
	$(CP) "*$(LOAD_EXT)" $(STAGING_DIR)

install:
	$(MKPATH) $(INSTALL_DIR)
	$(CP) "*$(LOAD_EXT)" $(INSTALL_DIR)

uninstall:
	$(RM_F) $(INSTALL_DIR)/$(DYNPMC_GROUP)$(LOAD_EXT)

Makefile: ../../build/src/pmc/Makefile.in
	cd ../.. && $(PERL) Configure.pl

clean:
	$(RM_F) $(CLEANUPS)

realclean:
	$(RM_F) $(CLEANUPS) Makefile

# Local variables:
#   mode: makefile
# End:
# vim: ft=make:

