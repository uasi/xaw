#include <parrot/parrot.h>
#include <libxml/tree.h>

#include "pmc_xmldoc.h"
#include "pmc_xmlnodeiter.h"
#include "pmc_xmlnode.h"
#include "pmc_xmlnamespace.h"


#define DATA(self) ((xmlAttrPtr)PMC_data(self))


BEGIN_PMC_HEADER_PREAMBLE

#include <libxml/tree.h>
PMC *XMLAttr_new(PARROT_INTERP, xmlAttrPtr attr);

END_PMC_HEADER_PREAMBLE


PMC *XMLAttr_new(PARROT_INTERP, xmlAttrPtr attr)
{
    INTVAL type = Parrot_XMLAttr_get_vtable_pointer(interp)->base_type;
    PMC *attr_pmc = Parrot_pmc_new(interp, type);
    VTABLE_set_pointer(interp, attr_pmc, attr);
    return attr_pmc;
}


pmclass XMLAttr
    dynpmc
    group libxml_group
    lib xml2
    auto_attrs {

    VTABLE void init() {
        PObj_custom_destroy_SET(SELF);
    }

    VTABLE void destroy() {
        xmlAttrPtr attr = DATA(SELF);
        xmlFreeProp(attr); /* XXX or xmlFreePropList? */
    }

    VTABLE void *get_pointer() {
        return DATA(SELF);
    }

    VTABLE void set_pointer(void *ptr) {
        PMC_data(SELF) = (xmlAttrPtr)ptr;
    }

    METHOD doc() {
        xmlAttrPtr attr = DATA(SELF);
        PMC *doc = PMCNULL;
        if (attr->doc) {
            doc = XMLDoc_new(INTERP, attr->doc);
        }
        RETURN(PMC *doc);
    }

    METHOD parent() {
        xmlAttrPtr attr = DATA(SELF);
        PMC *parent = PMCNULL;
        if (attr->parent) {
            parent = XMLNode_new(INTERP, attr->parent);
        }
        RETURN(PMC *parent);
    }

    /* XXX child() and children() may be broken */

    METHOD child() {
        xmlAttrPtr attr = DATA(SELF);
        PMC *child = PMCNULL;
        if (attr->children) {
            child = XMLNode_new(INTERP, attr->children);
        }
        RETURN(PMC *child);
    }

    METHOD children() {
        xmlAttrPtr attr = DATA(SELF);
        PMC *children = PMCNULL;
        if (attr->children) {
            children = XMLNodeIter_new(INTERP, SELF, attr->children);
        }
        RETURN(PMC *children);
    }

    METHOD next() {
        xmlAttrPtr attr = DATA(SELF);
        PMC *next = PMCNULL;
        if (attr->next) {
            next = XMLAttr_new(INTERP, attr->next);
        }
        RETURN(PMC *next);
    }

    METHOD prev() {
        xmlAttrPtr attr = DATA(SELF);
        PMC *prev = PMCNULL;
        if (attr->prev) {
            prev = XMLAttr_new(INTERP, attr->prev);
        }
        RETURN(PMC *prev);
    }

    METHOD last() {
        xmlAttrPtr attr = DATA(SELF);
        PMC *last = PMCNULL;
        if (attr->last) {
            last = XMLNode_new(INTERP, attr->last);
        }
        RETURN(PMC *last);
    }

    METHOD name() {
        xmlAttrPtr attr = DATA(SELF);
        STRING *name = STRINGNULL;
        if (!attr->name) {
            name = Parrot_str_new(INTERP, (const char *)attr->name, 0);
        }
        RETURN(STRING *name);
    }

    METHOD value() {
        xmlAttrPtr attr = DATA(SELF);
        STRING *value = STRINGNULL;
        xmlChar *content = xmlNodeGetContent((xmlNodePtr)attr);
        if (!content) {
            value = Parrot_str_new(INTERP, (const char *)content, 0);
            xmlFree(content);
        }
        RETURN(STRING *value);
    }
}
