#include <parrot/parrot.h>
#include <libxml/xpath.h>

#include "pmc_xmldoc.h"
#include "pmc_xmlnode.h"


BEGIN_PMC_HEADER_PREAMBLE

#include <libxml/xpath.h>
PMC *XPathObject_new(PARROT_INTERP, xmlXPathObjectPtr object, PMC *doc);

END_PMC_HEADER_PREAMBLE


PMC *XPathObject_new(PARROT_INTERP, xmlXPathObjectPtr object, PMC *doc)
{
    INTVAL type = Parrot_XPathObject_get_vtable_pointer(interp)->base_type;
    PMC *object_pmc = Parrot_pmc_new_init(interp, type, doc);
    VTABLE_set_pointer(interp, object_pmc, object);
    return object_pmc;
}


pmclass XPathObject
    dynpmc
    group libxml_group
    lib xml2
    auto_attrs {

    ATTR xmlXPathObjectPtr object;
    ATTR PMC *doc;

    VTABLE void init_pmc(PMC *pmc) {
        SET_ATTR_doc(INTERP, SELF, pmc);
        PObj_custom_mark_destroy_SETALL(SELF);
    }

    VTABLE void mark() {
        PMC *doc;
        GET_ATTR_doc(INTERP, SELF, doc);
        Parrot_gc_mark_PMC_alive(INTERP, doc);
    }

    VTABLE void destroy() {
        xmlXPathObjectPtr object;
        GET_ATTR_object(INTERP, SELF, object);
        xmlXPathFreeObject(object);
    }

    VTABLE void *get_pointer() {
        xmlXPathObjectPtr object;
        GET_ATTR_object(INTERP, SELF, object);
        return object;
    }

    VTABLE void set_pointer(void *ptr) {
        SET_ATTR_object(INTERP, SELF, (xmlXPathObjectPtr)ptr);
    }

    VTABLE INTVAL get_bool() {
        xmlXPathObjectPtr object;
        GET_ATTR_object(INTERP, SELF, object);

        if (object->type == XPATH_BOOLEAN) {
            return (INTVAL)object->boolval;
        }
        return (INTVAL)0;
    }

    VTABLE INTVAL get_integer() {
        xmlXPathObjectPtr object;
        GET_ATTR_object(INTERP, SELF, object);
        return (INTVAL)object->type;
    }

    VTABLE FLOATVAL get_number() {
        xmlXPathObjectPtr object;
        GET_ATTR_object(INTERP, SELF, object);

        if (object->type == XPATH_NUMBER) {
            return (FLOATVAL)object->floatval;
        }
        return (FLOATVAL)0.0;
    }

    VTABLE STRING *get_string() {
        xmlXPathObjectPtr object;
        GET_ATTR_object(INTERP, SELF, object);

        if (object->type == XPATH_STRING) {
            return Parrot_str_new(INTERP, (const char *)object->stringval, 0);
        }
        return STRINGNULL;
    }

    VTABLE PMC *get_pmc_keyed_int(INTVAL key) {
        int index = (int)key;
        xmlXPathObjectPtr object;
        xmlNodePtr node;
        PMC *pmc;

        GET_ATTR_object(INTERP, SELF, object);

        if (   index < 0
            || object->type != XPATH_NODESET
            || object->nodesetval == NULL
            || object->nodesetval->nodeNr <= index) {
            return PMCNULL;
        }

        node = object->nodesetval->nodeTab[index];

        switch (node->type) {
        case XML_ATTRIBUTE_NODE:
            /* NYI */
            return PMCNULL;
        case XML_NAMESPACE_DECL:
            /* NYI */
            return PMCNULL;
        default:
            return XMLNode_new(INTERP, node);
        }
    }

    VTABLE PMC *get_iterator() {
        /* NYI */
        return PMCNULL;
    }

    VTABLE INTVAL elements() {
        xmlXPathObjectPtr object;
        GET_ATTR_object(INTERP, SELF, object);

        if (object->type == XPATH_NODESET && object->nodesetval) {
            return (INTVAL)object->nodesetval->nodeNr;
        }
        return (INTVAL)0;
    }

    METHOD type() {
        INTVAL type = SELF.get_integer();
        RETURN(INTVAL type);
    }
}
