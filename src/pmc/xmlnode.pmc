#include <parrot/parrot.h>
#include <libxml/HTMLParser.h>

#include "common.h"
#include "pmc_xmldoc.h"


#define DATA(self) ((xmlNodePtr)PMC_data(self))


BEGIN_PMC_HEADER_PREAMBLE

#include <libxml/tree.h>
PMC *XMLNode_new(PARROT_INTERP, xmlNodePtr node);

END_PMC_HEADER_PREAMBLE


PMC *XMLNode_new(PARROT_INTERP, xmlNodePtr node)
{
    INTVAL type;
    PMC *node_pmc;

    /* If the node already have a corresponding XMLNode PMC, return it. */
    if (node->_private) {
        return (PMC *)node->_private;
    }

    type = Parrot_XMLNode_get_vtable_pointer(interp)->base_type;
    node_pmc = Parrot_pmc_new(interp, type);
    VTABLE_set_pointer(interp, node_pmc, node);
    return node_pmc;
}

static void deregister_xml_node(xmlNodePtr node)
{
    if (node->_private) {
        PMC_data((PMC *)node->_private) = NULL;
    }
}


pmclass XMLNode
    dynpmc
    group libxml_group
    lib xml2
    auto_attrs {

    void class_init(PARROT_INTERP, int entry) {
        xmlDeregisterNodeDefault(deregister_xml_node);
        xmlThrDefDeregisterNodeDefault(deregister_xml_node);
    }

    VTABLE void init() {
        PObj_custom_mark_destroy_SETALL(SELF);
    }

    VTABLE void mark() {
        xmlNodePtr node = DATA(SELF);
        if (!node) return;

        if (node->doc && node->doc->_private) {
            Parrot_gc_mark_PMC_alive(INTERP, (PMC *)node->doc->_private);
        }
        if (node->parent && node->parent->_private) {
            Parrot_gc_mark_PMC_alive(INTERP, (PMC *)node->parent->_private);
        }
    }

    VTABLE void destroy() {
        xmlNodePtr node = DATA(SELF);
        if (!node) return;

        node->_private = NULL;
        if (!node->parent) {
            xmlFreeNode(node);
        }
    }

    VTABLE void *get_pointer() {
	return DATA(SELF);
    }

    VTABLE void set_pointer(void *data) {
        PMC_data(SELF) = data;
        DATA(SELF)->_private = SELF;
    }

    METHOD STRING *name() {
	xmlNodePtr node = DATA(SELF);
	const xmlChar *name;
	STRING *name_str;
        
	switch (node->type) {
	case XML_DOCUMENT_NODE:
	case XML_HTML_DOCUMENT_NODE:
#ifdef LIBXML_DOCB_ENABLED
	case XML_DOCB_DOCUMENT_NODE:
#endif
	    name = ((xmlDocPtr)node)->URL;
	    break;
	case XML_ATTRIBUTE_NODE:
	    name = ((xmlAttrPtr)node)->name;
	    break;
	case XML_NAMESPACE_DECL:
	    name = ((xmlNsPtr)node)->prefix;
	    break;
	default:
	    name = node->name;
	    break;
	}

	name_str = Parrot_str_new(INTERP, (const char *)name, 0);
	RETURN(STRING *name_str);
    }

    METHOD doc() {
        xmlNodePtr node = DATA(SELF);
        xmlDocPtr doc = NULL;
        PMC *doc_pmc = PMCNULL;

        switch (node->type) {
        case XML_DOCUMENT_NODE:
#ifdef LIBXML_DOCB_ENABLED
        case XML_DOCB_DOCUMENT_NODE:
#endif
        case XML_HTML_DOCUMENT_NODE:
        case XML_NAMESPACE_DECL:
            doc = NULL;
            break;
        case XML_ATTRIBUTE_NODE:
            doc = (xmlDocPtr)((xmlAttrPtr)node->doc);
            break;
        default:
            doc = node->doc;
        }

        if (doc) {
            doc_pmc = XMLDoc_new(INTERP, doc);
        }
        RETURN(PMC *doc_pmc);
    }

    METHOD parent() {
        xmlNodePtr node = DATA(SELF);
	PMC *parent_node_pmc = PMCNULL;
	if (node->parent) {
	    parent_node_pmc = XMLNode_new(INTERP, node->parent);
	}
	RETURN(PMC *parent_node_pmc);
    }

    METHOD next() {
        xmlNodePtr node = DATA(SELF);
	PMC *next_node_pmc = PMCNULL;
	if (node->next) {
	    next_node_pmc = XMLNode_new(INTERP, node->next);
	}
	RETURN(PMC *next_node_pmc);
    }

    METHOD prev() {
        xmlNodePtr node = DATA(SELF);
	PMC *prev_node_pmc = PMCNULL;
	if (node->prev) {
	    prev_node_pmc = XMLNode_new(INTERP, node->prev);
	}
	RETURN(PMC *prev_node_pmc);
    }

    METHOD path() {
	xmlNodePtr node = DATA(SELF);
	xmlChar *path = xmlGetNodePath(node);
	STRING *path_str = STRINGNULL;
	if (path) {
	    path_str = Parrot_str_new(INTERP, (const char *)path, 0);
	}
	RETURN(STRING *path_str);
    }
}

// vim: expandtab shiftwidth=4 softtabstop=4
