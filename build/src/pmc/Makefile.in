## $Id$

PRODUCT_NAME  = libxml

# values from parrot_config
VERSION_DIR   = @versiondir@
INCLUDE_DIR   = @includedir@$(VERSION_DIR)
LIB_DIR       = @libdir@$(VERSION_DIR)
SRC_DIR       = @srcdir@$(VERSION_DIR)
TOOLS_DIR     = @libdir@$(VERSION_DIR)/tools/lib
STAGING_DIR   = ../../dynext
INSTALL_DIR   = $(LIB_DIR)/dynext

# Set up extensions
LOAD_EXT      = @load_ext@
O             = @o@

# Setup some commands
PERL          = @perl@
RM_F          = @rm_f@
MKPATH        = @mkpath@
CHMOD         = @chmod@
CP            = @cp@
CC            = @cc@ -c
LD            = @ld@
LDFLAGS       = @ldflags@ @ld_debug@ @libs@
LD_LOAD_FLAGS = @ld_load_flags@
CFLAGS        = @ccflags@ @cc_shared@ @cc_debug@ @ccwarn@ @gc_flag@
CC_OUT        = @cc_o_out@
LD_OUT        = @ld_out@
LIBPARROT     = @inst_libparrot_ldflags@

PMC2C_INCLUDES  = --include $(SRC_DIR) --include $(SRC_DIR)/pmc
PMC2C           = $(PERL) $(LIB_DIR)/tools/build/pmc2c.pl
PMC2CD          = $(PMC2C) --dump $(PMC2C_INCLUDES)
PMC2CC          = $(PMC2C) -c $(PMC2C_INCLUDES)

INCLUDES        = -I/usr/include/libxml2 -I$(INCLUDE_DIR) -I$(INCLUDE_DIR)/pmc
LINKARGS        = -lxml2 $(LDFLAGS) $(LD_LOAD_FLAGS) $(LIBPARROT)

DYNPMC_GROUP = $(PRODUCT_NAME)_group

PMC_SOURCES = \
	      xpathobject.pmc \
	      xpath.pmc \
	      xmlnodeiter.pmc \
	      xmlnode.pmc \
	      xmldoc.pmc \
	      htmldoc.pmc \
	      htmlparsercontext.pmc \
	      htmlparser.pmc

PMC_C = $(PMC_SOURCES:.pmc=.c)
PMC_DUMP = $(PMC_SOURCES:.pmc=.dump)

OBJS = \
	lib-$(DYNPMC_GROUP)$(O) \
	$(PMC_SOURCES:.pmc=$(O)) \
	common.o

CLEANUPS = \
	"*$(LOAD_EXT)" \
	"*$(O)" \
	"pmc*.h" \
	"*.dump" \
	$(PMC_C) \
	"*_group.*" \
#IF(win32):	"*.exp" \
#IF(win32):	"*.ilk" \
#IF(win32):	"*.manifext" \
#IF(win32):	"*.pdb" \
#IF(win32):	"*.lib" \
	$(STAGING_DIR)/$(DYNPMC_GROUP)$(LOAD_EXT)


all: staging

.SUFFIXES : .pmc .dump

.pmc.dump:
	$(PMC2C) --no-lines --dump $(PMC2C_INCLUDES) $<
.pmc.c:
	$(PMC2C) --no-lines -c $(PMC2C_INCLUDES) $<

generate: $(PMC_SOURCES) $(PMC_DUMP) $(PMC_C)
	$(PMC2C) --no-lines --library $(DYNPMC_GROUP) -c $(PMC_SOURCES)

compile: generate
	$(CC) $(CC_OUT)common$(O) $(INCLUDES) $(CFLAGS) common.c
	$(CC) $(CC_OUT)htmldoc$(O) $(INCLUDES) $(CFLAGS) htmldoc.c
	$(CC) $(CC_OUT)htmlparsercontext$(O) $(INCLUDES) $(CFLAGS) htmlparsercontext.c
	$(CC) $(CC_OUT)htmlparser$(O) $(INCLUDES) $(CFLAGS) htmlparser.c
	$(CC) $(CC_OUT)xpathobject$(O) $(INCLUDES) $(CFLAGS) xpathobject.c
	$(CC) $(CC_OUT)xpath$(O) $(INCLUDES) $(CFLAGS) xpath.c
	$(CC) $(CC_OUT)xmldoc$(O) $(INCLUDES) $(CFLAGS) xmldoc.c
	$(CC) $(CC_OUT)xmlnodeiter$(O) $(INCLUDES) $(CFLAGS) xmlnodeiter.c
	$(CC) $(CC_OUT)xmlnode$(O) $(INCLUDES) $(CFLAGS) xmlnode.c
	$(CC) $(CC_OUT)lib-$(DYNPMC_GROUP)$(O) $(INCLUDES) $(CFLAGS) $(DYNPMC_GROUP).c

linklibs: compile
	$(LD) $(LD_OUT)$(DYNPMC_GROUP)$(LOAD_EXT) $(OBJS) $(LINKARGS)

staging: linklibs
#IF(cygwin or hpux):	CHMOD 0775 "*$(LOAD_EXT)"
	$(MKPATH) $(STAGING_DIR)
	$(CP) "*$(LOAD_EXT)" $(STAGING_DIR)

install:
#IF(cygwin or hpux):	CHMOD 0775 "*$(LOAD_EXT)"
	$(MKPATH) $(INSTALL_DIR)
	$(CP) "*$(LOAD_EXT)" $(INSTALL_DIR)

uninstall:
	$(RM_F) $(INSTALL_DIR)/$(DYNPMC_GROUP)$(LOAD_EXT)

Makefile: ../../build/src/pmc/Makefile.in
	cd ../.. && $(PERL) Configure.pl

clean:
	$(RM_F) $(CLEANUPS)

realclean:
	$(RM_F) $(CLEANUPS) Makefile

# Local variables:
#   mode: makefile
# End:
# vim: ft=make:

